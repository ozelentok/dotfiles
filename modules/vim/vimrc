set nocompatible
if has('win32') || has('win64')
	let b:os='Windows'
	let b:vimFiles=$HOME . '/vimfiles'
	let b:vundlePath=$HOME . '/vimfiles/bundle'
	set rtp+=$HOME\vimfiles\bundle\vundle
	set directory=C:\temp
	set backupdir=C:\temp
	set guifont=Consolas:h15:cANSI
	" Vim with 256 colors inside ConEmu
	if !has("gui_running")
		set term=xterm
		set t_Co=256
		let &t_AB="\e[48;5;%dm"
		let &t_AF="\e[38;5;%dm"
	endif
else
	let b:os='Linux'
	let b:vimfiles=$HOME . '/.vim'
	let b:vundlePath=$HOME . '/.vim/bundle'
	set rtp+=$HOME/.vim/bundle/vundle
	set directory=/tmp
	set backupdir=/tmp
	set guifont=Ubuntu\ Mono\ ZPower\ 14
	set dictionary=/usr/share/dict/words
endif

" Vundle requires filetype to be off
filetype off
call vundle#begin(b:vundlePath)
Plugin 'gmarik/vundle'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'kien/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
"Plugin 'Shougo/neocomplete'
"Plugin 'Shougo/neosnippet'
"Plugin 'Shougo/neosnippet-snippets'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'rstacruz/vim-closer'

Plugin 'davidhalter/jedi-vim'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'digitaltoad/vim-jade'
Plugin 'vim-scripts/javacomplete'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'godlygeek/tabular'
call vundle#end()

"General
filetype plugin indent on
syntax on
set backup
set showcmd
set hlsearch
set incsearch
set ignorecase
set wildmenu
set wildmode=full
set wildignore=*.swp,.bak,*.pyc,*.class,*.o,*.obj
set wildignorecase
set autoindent
set number
set shiftwidth=2
set tabstop=2
set noexpandtab
set mouse=a
set laststatus=2
set encoding=utf-8
set spellsuggest=best,10
set textwidth=0
set autochdir
set backspace=indent,eol,start

"Colorscheme
colors colosus
hi Normal ctermbg=none
command! W w
" map c-h/j/k/l to move between windows
nmap <c-h> <c-w>h
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k
nmap <c-l> <c-w>l
" Navigation
noremap <space> 20j
vnoremap <space> 20j
noremap - 20k
vnoremap - 20k
"Resize
nnoremap _ <c-w>-
nnoremap + <c-w>+
nnoremap > <c-w>>
nnoremap < <c-w><

" Yank and paste using + register (works on X11 clipboard)
" Switch to * register in windows
if b:os == 'Windows'
	noremap <C-Space> "*
	vnoremap <C-Space> "*
else
	if has('gui_running')
		noremap <C-Space> "+
		vnoremap <C-Space> "+
	else
		noremap <C-@> "+
		vnoremap <C-@> "+
	endif
endif

" Go Back in tabs
noremap tp :tabp<cr>

" Date Insert
nnoremap <F3> "=strftime('%Y-%m-%d')<CR>P
inoremap <F3> <C-R>=strftime('%Y-%m-%d')<CR>
nnoremap <F4> "=strftime('%Y-%m-%d %H:%M:%S')<CR>P
inoremap <F4> <C-R>=strftime('%Y-%m-%d %H:%M:%S')<CR>

" From https://github.com/skwp/dotfiles/blob/master/vim/plugin/settings/stop-visual-paste-insanity.vim:
" If you visually select something and hit paste
" that thing gets yanked into your buffer. This
" generally is annoying when you're copying one item
" and repeatedly pasting it. This changes the paste
" command in visual mode so that it doesn't overwrite
" whatever is in your paste buffer.
vnoremap p "_dP
map <Leader>" ysiw"

"CtrlP
"CTags keybind
nnoremap <leader>] :CtrlPTag<cr>
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
"Syntastic
let g:syntastic_mode_map = { "mode": "active",
			\ "active_filetypes": [],
			\ "passive_filetypes": ['sass', 'scss', 'haml', 'html']}
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_cpp_compiler_options = '-Wall -std=c++11'

"neocomplete
"let g:neocomplete#enable_at_startup = 1
"let g:neocomplete#enable_smart_case = 0
" Plugin key-mappings.
"inoremap <expr><C-g> neocomplete#undo_completion()
"inoremap <expr><C-l> neocomplete#complete_common_string()
"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplete#close_popup()
"inoremap <expr><C-e>  neocomplete#cancel_popup()

"neosnippet
" SuperTab like snippets behavior.
"imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"			\ "\<Plug>(neosnippet_expand_or_jump)"
"			\: pumvisible() ? "\<C-n>" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"			\ "\<Plug>(neosnippet_expand_or_jump)"
"			\: "\<TAB>"
"
"" For snippet_complete marker.
"if has('conceal')
"	set conceallevel=2 concealcursor=i
"endif

"Airline
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.linenr = '⭡'
let g:airline_symbols.readonly = '⭤'
let g:airline_theme='powerlineish'
let g:airline#extensions#whitespace#enabled = 1

"NERDTree Window Toogle
noremap <Leader>nt :NERDTreeTabsToggle<cr>
let g:nerdtree_tabs_open_on_gui_startup = 0

" FileType
autocmd BufRead,BufEnter *.js setlocal nocindent smartindent
autocmd BufRead,BufEnter *.vs setlocal filetype=c
autocmd BufRead,BufEnter *.fs setlocal filetype=c

" YouCompleteMe
let g:ycm_global_ycm_extra_conf = b:vimfiles . '/ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_seed_identifiers_with_syntax = 1

" Jedi - Python Completion
let g:jedi#auto_initialization = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#completions_enabled = 0
let g:jedi#completions_command = ""
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#show_call_signatures = "1"
let g:jedi#show_call_signatures_delay = 0
let g:jedi#documentation_command = "<leader>pk"
let g:jedi#usages_command = "<leader>pu"

" Autocomplete
set omnifunc=syntaxcomplete#Complete
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html setlocal autoindent omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" Javascript & JSX
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
" For syntastic support, install eslint
" $ npm install -g eslint

" CTags
set tags=./tags,../tags,/TAGS,../TAGS
