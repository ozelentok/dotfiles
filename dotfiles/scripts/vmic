#!/usr/bin/env python3

import argparse
import os
import sys
import subprocess
import json
import pulsectl

MIC_SOURCE = 'alsa_input.usb-Jieli_Technology_UACDemoV1.0_FFFFFFFFFFFFFFFF-00.mono-fallback'
HARDWARE_SINK = 'alsa_output.pci-0000_00_1f.3.analog-surround-21'
SOUNDBOARD_SINK = 'SoundboardSink'
SOUNDBOARD_AND_MIC_SINK = 'MixedSink'
SOUNDBOARD_AND_MIC_VIRTUAL_SOURCE = 'VirtualMic'
MODULE_IDS_PATH = os.environ['XDG_RUNTIME_DIR'] + '/virtual-mic-ids'


def main() -> None:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    subparsers.add_parser('create')
    subparsers.add_parser('remove')
    subparsers.add_parser('volume')
    args = parser.parse_args()
    if args.command == 'create':
        if os.path.exists(MODULE_IDS_PATH):
            print('VirtualMic already exists', file=sys.stderr)
            return
        create_virtual_mic()
    elif args.command == 'remove':
        if not os.path.exists(MODULE_IDS_PATH):
            print('VirtualMic does not exist', file=sys.stderr)
            return
        remove_virtual_mic()
        os.remove(MODULE_IDS_PATH)
    elif args.command == 'volume':
        set_loopbacks_volumes()
    else:
        parser.print_usage()


def create_virtual_mic() -> None:
    modules_ids: list[int] = []
    modules_ids.append(create_null_sink(SOUNDBOARD_SINK))
    modules_ids.append(create_null_sink(SOUNDBOARD_AND_MIC_SINK))
    modules_ids.append(
        create_virtual_source(SOUNDBOARD_AND_MIC_VIRTUAL_SOURCE,
                              sink_monitor(SOUNDBOARD_AND_MIC_SINK)))
    modules_ids.append(create_loopback(sink_monitor(SOUNDBOARD_SINK), HARDWARE_SINK))
    modules_ids.append(create_loopback(sink_monitor(SOUNDBOARD_SINK), SOUNDBOARD_AND_MIC_SINK))
    modules_ids.append(create_loopback(MIC_SOURCE, SOUNDBOARD_AND_MIC_SINK))
    save_module_ids(modules_ids)
    set_loopbacks_volumes()


def remove_virtual_mic() -> None:
    module_ids = load_module_ids()
    for module_id in reversed(module_ids):
        remove_module(module_id)


def create_null_sink(sink: str) -> int:
    return int(
        subprocess.check_output([
            'pactl', 'load-module', 'module-null-sink', f'sink_name={sink}',
            f'sink_properties=device.description={sink}', 'channels=2',
        ]))


def create_loopback(source: str, sink: str) -> int:
    return int(
        subprocess.check_output([
            'pactl', 'load-module', 'module-loopback', f'source={source}', f'sink={sink}',
        ]))


def create_virtual_source(virtual_src: str, real_src: str) -> int:
    return int(
        subprocess.check_output([
            'pactl', 'load-module', 'module-virtual-source', f'source_name={virtual_src}',
            f'source_properties=device.description={virtual_src}', f'master={real_src}',
            'channels=2',
        ]))


def remove_module(module_id: int) -> None:
    subprocess.run(['pactl', 'unload-module', f'{module_id}', ])


def set_loopbacks_volumes() -> None:
    with pulsectl.Pulse('virtual-mic') as pulse:
        volume_base = 0
        for sink_input in pulse.sink_input_list():
            name = sink_input.name
            if f'Loopback from Monitor of {SOUNDBOARD_SINK}' == name:
                sink_input.volume.value_flat = 0.55 - volume_base
                pulse.volume_set(sink_input, sink_input.volume)
                volume_base += 0.05
            elif 'Loopback from UAC' in name:
                sink_input.volume.value_flat = 1
                pulse.volume_set(sink_input, sink_input.volume)


def sink_monitor(sink: str) -> str:
    return f'{sink}.monitor'


def save_module_ids(module_ids: list[int]) -> None:
    with open(MODULE_IDS_PATH, 'w') as ids_file:
        json.dump(module_ids, ids_file)


def load_module_ids() -> list[int]:
    with open(MODULE_IDS_PATH, 'r') as ids_file:
        module_ids = json.load(ids_file)
    if type(module_ids) is not list:
        raise SystemError(f'Invalid module ids in {MODULE_IDS_PATH}')
    return module_ids


if __name__ == '__main__':
    main()
