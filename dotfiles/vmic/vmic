#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
from pathlib import Path

import pulsectl

MIC_SOURCE = "alsa_input.usb-Jieli_Technology_UACDemoV1.0_FFFFFFFFFFFFFFFF-00.mono-fallback"
MIC2_SOURCE = "alsa_input.pci-0000_00_1f.3.analog-stereo"
SOUNDBOARD_SINK = "SoundboardSink"
VIRTUAL_MIC = "VirtualMic"
MODULE_IDS_PATH = Path(os.environ["XDG_RUNTIME_DIR"], "virtual-mic-ids")


class VirtualMicLoader:
    _device_descriptions: dict[str, str]
    _loaded_modules_ids: list[int]

    def __init__(self):
        self._descriptions = {}
        self._loaded_modules_ids = []
        with pulsectl.Pulse() as pulse:
            for s in pulse.sink_list() + pulse.source_list():
                self._descriptions[s.name] = s.description.replace(" ", "\\ ")

    def load(self) -> None:
        if MODULE_IDS_PATH.exists():
            raise RuntimeError("VirutalMic loopback modules are already registered")

        with pulsectl.Pulse() as p:
            default_sink = p.server_info().default_sink_name  # type: ignore

        self._load_loopback(SOUNDBOARD_SINK, default_sink, True)
        self._load_loopback(SOUNDBOARD_SINK, VIRTUAL_MIC, True)
        self._load_loopback(MIC_SOURCE, VIRTUAL_MIC)
        self._load_loopback(MIC2_SOURCE, VIRTUAL_MIC)

        with open(MODULE_IDS_PATH, "w") as ids_file:
            json.dump(self._loaded_modules_ids, ids_file)

        self._set_loopbacks_volumes()

    def _load_loopback(self, source: str, sink: str, monitor_source: bool = False) -> None:
        actual_source = f"{source}.monitor" if monitor_source else source
        args = [
            "pactl",
            "load-module",
            "module-loopback",
            f"source={actual_source}",
            f"sink={sink}",
            f"source_output_properties=device.description='Loopback\\ to\\ {self._descriptions[sink]}'",
            f"sink_input_properties=device.description='Loopback\\ from\\ {self._descriptions[source]}'",
            "sink_dont_move=false",
            "channels=2",
            "format=float32le",
        ]
        module_id = int(subprocess.check_output(args))
        self._loaded_modules_ids.append(module_id)

    def _set_loopbacks_volumes(self) -> None:
        with pulsectl.Pulse() as pulse:
            volume_base = 0
            for sink_input in pulse.sink_input_list():
                name = sink_input.name
                if f"Loopback from {SOUNDBOARD_SINK}" in name:
                    sink_input.volume.value_flat = 0.50 - volume_base
                    pulse.volume_set(sink_input, sink_input.volume)
                    volume_base += 0.10
                elif "Loopback from UAC" in name or "Loopback from Built-in" in name:
                    sink_input.volume.value_flat = 1
                    pulse.volume_set(sink_input, sink_input.volume)


def remove_loopbacks() -> None:
    if not MODULE_IDS_PATH.exists():
        raise RuntimeError("VirutalMic loopback modules are not registered")

    with open(MODULE_IDS_PATH, "r") as ids_file:
        module_ids = json.load(ids_file)
    for module_id in reversed(module_ids):
        subprocess.run(["pactl", "unload-module", str(module_id)])
    MODULE_IDS_PATH.unlink()


def main() -> None:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command")
    subparsers.add_parser("create")
    subparsers.add_parser("remove")
    args = parser.parse_args()
    if args.command == "create":
        VirtualMicLoader().load()
    elif args.command == "remove":
        remove_loopbacks()
    else:
        parser.print_usage()


if __name__ == "__main__":
    main()
