[[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && which startx > /dev/null && exec startx

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "$HOME/.cache/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "$HOME/.cache/p10k-instant-prompt-${(%):-%n}.zsh"
fi

setopt histignorealldups sharehistory
bindkey -e
set -o vi

HISTSIZE=100000
SAVEHIST=100000
HISTFILE=$HOME/.zsh_history
setopt APPEND_HISTORY
setopt PATH_DIRS
setopt AUTO_CD
setopt CORRECT
setopt PROMPT_SUBST

# Bright Dircolors
export LS_COLORS='rs=0:di=01;94:ln=01;96:mh=00:pi=40;93:so=01;95:do=01;95:bd=40;93;01:cd=40;93;01:or=40;91;01:mi=00:su=97;41:sg=90;43:ca=00:tw=90;42:ow=94;42:st=97;44:ex=01;92:*.7z=01;91:*.ace=01;91:*.alz=01;91:*.apk=01;91:*.arc=01;91:*.arj=01;91:*.bz=01;91:*.bz2=01;91:*.cab=01;91:*.cpio=01;91:*.crate=01;91:*.deb=01;91:*.drpm=01;91:*.dwm=01;91:*.dz=01;91:*.ear=01;91:*.egg=01;91:*.esd=01;91:*.gz=01;91:*.jar=01;91:*.lha=01;91:*.lrz=01;91:*.lz=01;91:*.lz4=01;91:*.lzh=01;91:*.lzma=01;91:*.lzo=01;91:*.pyz=01;91:*.rar=01;91:*.rpm=01;91:*.rz=01;91:*.sar=01;91:*.swm=01;91:*.t7z=01;91:*.tar=01;91:*.taz=01;91:*.tbz=01;91:*.tbz2=01;91:*.tgz=01;91:*.tlz=01;91:*.txz=01;91:*.tz=01;91:*.tzo=01;91:*.tzst=01;91:*.udeb=01;91:*.war=01;91:*.whl=01;91:*.wim=01;91:*.xz=01;91:*.z=01;91:*.zip=01;91:*.zoo=01;91:*.zst=01;91:*.avif=01;95:*.jpg=01;95:*.jpeg=01;95:*.jxl=01;95:*.mjpg=01;95:*.mjpeg=01;95:*.gif=01;95:*.bmp=01;95:*.pbm=01;95:*.pgm=01;95:*.ppm=01;95:*.tga=01;95:*.xbm=01;95:*.xpm=01;95:*.tif=01;95:*.tiff=01;95:*.png=01;95:*.svg=01;95:*.svgz=01;95:*.mng=01;95:*.pcx=01;95:*.mov=01;95:*.mpg=01;95:*.mpeg=01;95:*.m2v=01;95:*.mkv=01;95:*.webm=01;95:*.webp=01;95:*.ogm=01;95:*.mp4=01;95:*.m4v=01;95:*.mp4v=01;95:*.vob=01;95:*.qt=01;95:*.nuv=01;95:*.wmv=01;95:*.asf=01;95:*.rm=01;95:*.rmvb=01;95:*.flc=01;95:*.avi=01;95:*.fli=01;95:*.flv=01;95:*.gl=01;95:*.dl=01;95:*.xcf=01;95:*.xwd=01;95:*.yuv=01;95:*.cgm=01;95:*.emf=01;95:*.ogv=01;95:*.ogx=01;95:*.aac=00;96:*.au=00;96:*.flac=00;96:*.m4a=00;96:*.mid=00;96:*.midi=00;96:*.mka=00;96:*.mp3=00;96:*.mpc=00;96:*.ogg=00;96:*.ra=00;96:*.wav=00;96:*.oga=00;96:*.opus=00;96:*.spx=00;96:*.xspf=00;96:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:'

fpath=($DOTFILES_ROOT/dotfiles/zsh/completions $fpath)
autoload -Uz compinit && compinit -i

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:messages' format '%F{purple}-- %d --%f'
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:corrections' format '%F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:warnings' format '%F{red}-- No matches for:%f %d --'
# Ignore case
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,cmd'

autoload -U url-quote-magic bracketed-paste-magic
zle -N self-insert url-quote-magic
zle -N bracketed-paste bracketed-paste-magic

up-line-or-local-history() {
  zle set-local-history 1
  zle up-line-or-history
  zle set-local-history 0
}
down-line-or-local-history() {
  zle set-local-history 1
  zle down-line-or-history
  zle set-local-history 0
}

# Arrows local history
bindkey "^[OA" up-line-or-local-history
bindkey "^[OB" down-line-or-local-history
zle -N up-line-or-local-history
zle -N down-line-or-local-history

# Home and End
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
bindkey "${terminfo[khome]}" beginning-of-line
bindkey "${terminfo[kend]}" end-of-line
# Insert and Delete
bindkey "${terminfo[kich1]}" overwrite-mode
bindkey "${terminfo[kdch1]}" delete-char
# Pageup and Pagedown
bindkey "${terminfo[kpp]}" beginning-of-buffer-or-history
bindkey "${terminfo[knp]}" end-of-buffer-or-history
# Ctrl-Left and Ctrl-Right
bindkey "\e[5C" forward-word
bindkey "\e[5D" backward-word
bindkey "\e\e[C" forward-word
bindkey "\e\e[D" backward-word
bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word
bindkey -M vicmd '^[[1;5C' forward-word
bindkey -M vicmd '^[[1;5D' backward-word
bindkey -M viins '^[[1;5C' forward-word
bindkey -M viins '^[[1;5D' backward-word
bindkey -M viins '^?' backward-delete-char

function zle-line-init () {
  echoti smkx
}
function zle-line-finish () {
  echoti rmkx
}

if [ -n "${DISPLAY:-}" ]; then
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# Edit current command in editor
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Colored man
man() {
  env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[38;5;246m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}

alias ls='ls --color=auto --group-directories-first'
alias grep='grep --color=auto'

# GNU ls aliases
# alias ll='ls -lFhX --time-style=long-iso'
# alias la='ls -A'

# LSDeluxe aliases
alias la='lsd -A'
alias ll='lsd -lFX'
alias lla='lsd -lFXA'
alias lsd='lsd -1'
alias l='lsd'

alias rm='rm -I'
alias ranger='. ranger'

alias tt='cd /tmp'
alias 44='cd /tmp/1-imgs'
alias bt='bluetui'
alias pwf='sudo poweroff'
alias rbt='sudo reboot'
alias psu='ps -lFww --ppid 2 -p 2 --deselect'
alias cpptags='ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++'

ei() {
  if file_path="$(/usr/bin/which --skip-functions --skip-alias "$1" 2>/dev/null)"; then
    nvim "$file_path"
  else
    echo "$1 not found"
  fi
}

edit-current-script() {
  ei "$(echo "${BUFFER}" | awk '{print $1}')"
}

zle -N edit-current-script
bindkey '^X^V' edit-current-script

rdp() {
  rdesktop "$1" -g 1920x1060 -u "$2" -z -0 -r clipboard:CLIPBOARD ${@:3}
}

jp() {
  for f in "$@"; do
    magick "${f}" "${f%.*}.jpg" && rm "${f}"
  done
}

jpk() {
  for f in "$@"; do
    magick "${f}" "${f%.*}.jpg"
  done
}

source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

ZLE_RPROMPT_INDENT=0
source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme
source "$HOME/.p10k.zsh"

source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh
export FZF_COMPLETION_TRIGGER='~~'
export FZF_ALT_C_OPTS="--walker dir,follow"
export FZF_COMPLETION_OPTS="--header-first --header 'Keymap: Ctrl-O(rifle), Ctrl-U(doublecmd), Ctrl-E(vim), Ctrl-Y(copy path), Ctrl-H(copy absolute path)'
  --bind 'ctrl-o:execute(rifle {})+abort'
  --bind 'ctrl-u:execute-silent(doublecmd -C {} &)+abort'
  --bind 'ctrl-e:execute(vim {})+abort'
  --bind 'ctrl-y:execute-silent(echo -n {} | xsel -i -b)'
  --bind 'ctrl-h:execute-silent(echo -n \$(realpath -s {}) | xsel -i -b)'"
export FZF_CTRL_T_OPTS="${FZF_COMPLETION_OPTS}"

eval "$(zoxide init zsh --cmd j)"

flc() {
  local cd_path
  cd_path=$(locate -i "$1" | fzf \
    --scheme=path \
    --height '40%' \
    --header-first --header 'Keymap: Enter(cd), Ctrl-O(rifle), Ctrl-U(doublecmd), Ctrl-E(vim), Ctrl-Y(copy path), Ctrl-H(copy absolute path)' \
    --bind 'ctrl-o:execute(rifle {})+abort' \
    --bind 'ctrl-u:execute-silent(doublecmd -C {} &)+abort' \
    --bind 'ctrl-e:execute(vim {})+abort' \
    --bind 'ctrl-y:execute-silent(echo -n {} | xsel -i -b)' \
    --bind 'ctrl-h:execute-silent(echo -n $(realpath -s {}) | xsel -i -b)')
  if [ -z "${cd_path}" ]; then
    return
  elif [ -d "${cd_path}" ]; then
    cd -- "${cd_path}" || return
  else
    cd -- "$(dirname "${cd_path}")" || return
  fi
}

[[ -f "$HOME/.zshrc_local" ]] && source "$HOME/.zshrc_local"

